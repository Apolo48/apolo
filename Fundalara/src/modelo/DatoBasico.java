package modelo;

// Generated 30-dic-2011 0:38:42 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * DatoBasico generated by hbm2java
 */
@Entity
@Table(name = "dato_basico", schema = "public")
public class DatoBasico implements java.io.Serializable {

	private int codigoDatoBasico;
	private TipoDato tipoDato;
	private DatoBasico datoBasico;
	private String nombre;
	private String descripcion;
	private char estatus;
	private Set<FamiliarJugador> familiarJugadors = new HashSet<FamiliarJugador>(
			0);
	private Set<TallaPorIndumentaria> tallaPorIndumentariasForCodigoIndumentaria = new HashSet<TallaPorIndumentaria>(
			0);
	private Set<PlanRotacion> planRotacions = new HashSet<PlanRotacion>(0);
	private Set<EgresoFormaPago> egresoFormaPagosForCodigoTarjeta = new HashSet<EgresoFormaPago>(
			0);
	private Set<TipoPagoRepresentante> tipoPagoRepresentantes = new HashSet<TipoPagoRepresentante>(
			0);
	private Set<Divisa> divisas = new HashSet<Divisa>(0);
	private Set<Indicador> indicadorsForCodigoTipo = new HashSet<Indicador>(0);
	private Set<SolicitudMantenimiento> solicitudMantenimientos = new HashSet<SolicitudMantenimiento>(
			0);
	private Set<IndicadorActividadEscala> indicadorActividadEscalas = new HashSet<IndicadorActividadEscala>(
			0);
	private Set<ProveedorBanco> proveedorBancos = new HashSet<ProveedorBanco>(0);
	private Set<RosterCompetencia> rosterCompetenciasForCodigoJugadorClave = new HashSet<RosterCompetencia>(
			0);
	private Set<Liga> ligas = new HashSet<Liga>(0);
	private Set<IndicadorTest> indicadorTests = new HashSet<IndicadorTest>(0);
	private Set<Persona> personasForCodigoParroquia = new HashSet<Persona>(0);
	private Set<PersonalContrato> personalContratosForCodigoHorario = new HashSet<PersonalContrato>(
			0);
	private Set<PersonalJuego> personalJuegos = new HashSet<PersonalJuego>(0);
	private Set<Indicador> indicadorsForCodigoModalidad = new HashSet<Indicador>(
			0);
	private Set<Institucion> institucionsForCodigoTipoInstitucion = new HashSet<Institucion>(
			0);
	private Set<PersonalCargo> personalCargos = new HashSet<PersonalCargo>(0);
	private Set<EstadoActividad> estadoActividads = new HashSet<EstadoActividad>(
			0);
	private Set<Estadio> estadios = new HashSet<Estadio>(0);
	private Set<Actividad> actividads = new HashSet<Actividad>(0);
	private Set<JugadorForaneo> jugadorForaneos = new HashSet<JugadorForaneo>(0);
	private Set<RecaudoPorProceso> recaudoPorProcesosForCodigoImportancia = new HashSet<RecaudoPorProceso>(
			0);
	private Set<CuentaPagar> cuentaPagarsForCodigoTipoDocumento = new HashSet<CuentaPagar>(
			0);
	private Set<Competencia> competenciasForCodigoEstadoCompetencia = new HashSet<Competencia>(
			0);
	private Set<ActividadEntrenamiento> actividadEntrenamientos = new HashSet<ActividadEntrenamiento>(
			0);
	private Set<RosterCompetencia> rosterCompetenciasForCodigoTipoJugador = new HashSet<RosterCompetencia>(
			0);
	private Set<PersonalForaneoJuego> personalForaneoJuegos = new HashSet<PersonalForaneoJuego>(
			0);
	private Set<LineUp> lineUpsForCodigoPosicion = new HashSet<LineUp>(0);
	private Set<LogroPorJugador> logroPorJugadors = new HashSet<LogroPorJugador>(
			0);
	private Set<DocumentoAcreedor> documentoAcreedors = new HashSet<DocumentoAcreedor>(
			0);
	private Set<SesionEjecutada> sesionEjecutadas = new HashSet<SesionEjecutada>(
			0);
	private Set<Institucion> institucionsForCodigoParroquia = new HashSet<Institucion>(
			0);
	private Set<CuentaPagar> cuentaPagarsForCodigoTipoEgreso = new HashSet<CuentaPagar>(
			0);
	private Set<IngresoFormaPago> ingresoFormaPagosForCodigoFormaPago = new HashSet<IngresoFormaPago>(
			0);
	private Set<EscalaMedicion> escalaMedicions = new HashSet<EscalaMedicion>(0);
	private Set<DatoAcademico> datoAcademicosForCodigoCurso = new HashSet<DatoAcademico>(
			0);
	private Set<AsistenciaJugador> asistenciaJugadors = new HashSet<AsistenciaJugador>(
			0);
	private Set<PersonalForaneo> personalForaneos = new HashSet<PersonalForaneo>(
			0);
	private Set<DatoAcademico> datoAcademicosForCodigoAnnoEscolar = new HashSet<DatoAcademico>(
			0);
	private Set<ComisionEquipo> comisionEquipos = new HashSet<ComisionEquipo>(0);
	private Set<Jugador> jugadorsForCodigoPais = new HashSet<Jugador>(0);
	private Set<DatoBasico> datoBasicos = new HashSet<DatoBasico>(0);
	private Set<Ingreso> ingresos = new HashSet<Ingreso>(0);
	private Set<PersonalTipoNomina> personalTipoNominas = new HashSet<PersonalTipoNomina>(
			0);
	private Set<Jugador> jugadorsForCodigoParroquiaNacimiento = new HashSet<Jugador>(
			0);
	private Set<TallaPorIndumentaria> tallaPorIndumentariasForCodigoTalla = new HashSet<TallaPorIndumentaria>(
			0);
	private Set<Equipo> equipos = new HashSet<Equipo>(0);
	private Set<Material> materialsForCodigoTipoMaterial = new HashSet<Material>(
			0);
	private Set<Medico> medicos = new HashSet<Medico>(0);
	private Set<Competencia> competenciasForCodigoEstado = new HashSet<Competencia>(
			0);
	private Set<TareaActividadPlanificada> tareaActividadPlanificadas = new HashSet<TareaActividadPlanificada>(
			0);
	private Set<Competencia> competenciasForCodigoOrganizacion = new HashSet<Competencia>(
			0);
	private Set<IngresoFormaPago> ingresoFormaPagosForCodigoBanco = new HashSet<IngresoFormaPago>(
			0);
	private Set<Sesion> sesions = new HashSet<Sesion>(0);
	private Set<IngresoFormaPago> ingresoFormaPagosForCodigoTarjeta = new HashSet<IngresoFormaPago>(
			0);
	private Set<TipoCompetencia> tipoCompetencias = new HashSet<TipoCompetencia>(
			0);
	private Set<ResultadoActividad> resultadoActividads = new HashSet<ResultadoActividad>(
			0);
	private Set<Nomina> nominas = new HashSet<Nomina>(0);
	private Set<AfeccionPersonal> afeccionPersonals = new HashSet<AfeccionPersonal>(
			0);
	private Set<Horario> horarios = new HashSet<Horario>(0);
	private Set<LapsoDeportivo> lapsoDeportivos = new HashSet<LapsoDeportivo>(0);
	private Set<Familiar> familiars = new HashSet<Familiar>(0);
	private Set<RetiroTraslado> retiroTraslados = new HashSet<RetiroTraslado>(0);
	private Set<PersonalContrato> personalContratosForCodigoModalidad = new HashSet<PersonalContrato>(
			0);
	private Set<EgresoFormaPago> egresoFormaPagosForCodigoBanco = new HashSet<EgresoFormaPago>(
			0);
	private Set<ActividadCalendario> actividadCalendarios = new HashSet<ActividadCalendario>(
			0);
	private Set<Persona> personasForCodigoTipoPersona = new HashSet<Persona>(0);
	private Set<AfeccionJugador> afeccionJugadors = new HashSet<AfeccionJugador>(
			0);
	private Set<RecaudoPorProceso> recaudoPorProcesosForCodigoProceso = new HashSet<RecaudoPorProceso>(
			0);
	private Set<RecaudoPorProceso> recaudoPorProcesosForCodigoDocumento = new HashSet<RecaudoPorProceso>(
			0);
	private Set<PlanificacionActividad> planificacionActividads = new HashSet<PlanificacionActividad>(
			0);
	private Set<DatoSocial> datoSocials = new HashSet<DatoSocial>(0);
	private Set<DatoConducta> datoConductas = new HashSet<DatoConducta>(0);
	private Set<LineUp> lineUpsForCodigoTipoMencion = new HashSet<LineUp>(0);
	private Set<SeguridadFuncional> seguridadFuncionals = new HashSet<SeguridadFuncional>(
			0);
	private Set<Juego> juegos = new HashSet<Juego>(0);
	private Set<MotivoSancion> motivoSancions = new HashSet<MotivoSancion>(0);
	private Set<Material> materialsForCodigoUnidadMedida = new HashSet<Material>(
			0);
	private Set<TareaActividad> tareaActividads = new HashSet<TareaActividad>(0);
	private Set<PersonaNatural> personaNaturals = new HashSet<PersonaNatural>(0);
	private Set<ConceptoNomina> conceptoNominas = new HashSet<ConceptoNomina>(0);
	private Set<Instalacion> instalacions = new HashSet<Instalacion>(0);

	public DatoBasico() {
	}

	public DatoBasico(int codigoDatoBasico, TipoDato tipoDato, String nombre,
			char estatus) {
		this.codigoDatoBasico = codigoDatoBasico;
		this.tipoDato = tipoDato;
		this.nombre = nombre;
		this.estatus = estatus;
	}

	public DatoBasico(
			int codigoDatoBasico,
			TipoDato tipoDato,
			DatoBasico datoBasico,
			String nombre,
			String descripcion,
			char estatus,
			Set<FamiliarJugador> familiarJugadors,
			Set<TallaPorIndumentaria> tallaPorIndumentariasForCodigoIndumentaria,
			Set<PlanRotacion> planRotacions,
			Set<EgresoFormaPago> egresoFormaPagosForCodigoTarjeta,
			Set<TipoPagoRepresentante> tipoPagoRepresentantes,
			Set<Divisa> divisas, Set<Indicador> indicadorsForCodigoTipo,
			Set<SolicitudMantenimiento> solicitudMantenimientos,
			Set<IndicadorActividadEscala> indicadorActividadEscalas,
			Set<ProveedorBanco> proveedorBancos,
			Set<RosterCompetencia> rosterCompetenciasForCodigoJugadorClave,
			Set<Liga> ligas, Set<IndicadorTest> indicadorTests,
			Set<Persona> personasForCodigoParroquia,
			Set<PersonalContrato> personalContratosForCodigoHorario,
			Set<PersonalJuego> personalJuegos,
			Set<Indicador> indicadorsForCodigoModalidad,
			Set<Institucion> institucionsForCodigoTipoInstitucion,
			Set<PersonalCargo> personalCargos,
			Set<EstadoActividad> estadoActividads, Set<Estadio> estadios,
			Set<Actividad> actividads, Set<JugadorForaneo> jugadorForaneos,
			Set<RecaudoPorProceso> recaudoPorProcesosForCodigoImportancia,
			Set<CuentaPagar> cuentaPagarsForCodigoTipoDocumento,
			Set<Competencia> competenciasForCodigoEstadoCompetencia,
			Set<ActividadEntrenamiento> actividadEntrenamientos,
			Set<RosterCompetencia> rosterCompetenciasForCodigoTipoJugador,
			Set<PersonalForaneoJuego> personalForaneoJuegos,
			Set<LineUp> lineUpsForCodigoPosicion,
			Set<LogroPorJugador> logroPorJugadors,
			Set<DocumentoAcreedor> documentoAcreedors,
			Set<SesionEjecutada> sesionEjecutadas,
			Set<Institucion> institucionsForCodigoParroquia,
			Set<CuentaPagar> cuentaPagarsForCodigoTipoEgreso,
			Set<IngresoFormaPago> ingresoFormaPagosForCodigoFormaPago,
			Set<EscalaMedicion> escalaMedicions,
			Set<DatoAcademico> datoAcademicosForCodigoCurso,
			Set<AsistenciaJugador> asistenciaJugadors,
			Set<PersonalForaneo> personalForaneos,
			Set<DatoAcademico> datoAcademicosForCodigoAnnoEscolar,
			Set<ComisionEquipo> comisionEquipos,
			Set<Jugador> jugadorsForCodigoPais, Set<DatoBasico> datoBasicos,
			Set<Ingreso> ingresos, Set<PersonalTipoNomina> personalTipoNominas,
			Set<Jugador> jugadorsForCodigoParroquiaNacimiento,
			Set<TallaPorIndumentaria> tallaPorIndumentariasForCodigoTalla,
			Set<Equipo> equipos, Set<Material> materialsForCodigoTipoMaterial,
			Set<Medico> medicos, Set<Competencia> competenciasForCodigoEstado,
			Set<TareaActividadPlanificada> tareaActividadPlanificadas,
			Set<Competencia> competenciasForCodigoOrganizacion,
			Set<IngresoFormaPago> ingresoFormaPagosForCodigoBanco,
			Set<Sesion> sesions,
			Set<IngresoFormaPago> ingresoFormaPagosForCodigoTarjeta,
			Set<TipoCompetencia> tipoCompetencias,
			Set<ResultadoActividad> resultadoActividads, Set<Nomina> nominas,
			Set<AfeccionPersonal> afeccionPersonals, Set<Horario> horarios,
			Set<LapsoDeportivo> lapsoDeportivos, Set<Familiar> familiars,
			Set<RetiroTraslado> retiroTraslados,
			Set<PersonalContrato> personalContratosForCodigoModalidad,
			Set<EgresoFormaPago> egresoFormaPagosForCodigoBanco,
			Set<ActividadCalendario> actividadCalendarios,
			Set<Persona> personasForCodigoTipoPersona,
			Set<AfeccionJugador> afeccionJugadors,
			Set<RecaudoPorProceso> recaudoPorProcesosForCodigoProceso,
			Set<RecaudoPorProceso> recaudoPorProcesosForCodigoDocumento,
			Set<PlanificacionActividad> planificacionActividads,
			Set<DatoSocial> datoSocials, Set<DatoConducta> datoConductas,
			Set<LineUp> lineUpsForCodigoTipoMencion,
			Set<SeguridadFuncional> seguridadFuncionals, Set<Juego> juegos,
			Set<MotivoSancion> motivoSancions,
			Set<Material> materialsForCodigoUnidadMedida,
			Set<TareaActividad> tareaActividads,
			Set<PersonaNatural> personaNaturals,
			Set<ConceptoNomina> conceptoNominas, Set<Instalacion> instalacions) {
		this.codigoDatoBasico = codigoDatoBasico;
		this.tipoDato = tipoDato;
		this.datoBasico = datoBasico;
		this.nombre = nombre;
		this.descripcion = descripcion;
		this.estatus = estatus;
		this.familiarJugadors = familiarJugadors;
		this.tallaPorIndumentariasForCodigoIndumentaria = tallaPorIndumentariasForCodigoIndumentaria;
		this.planRotacions = planRotacions;
		this.egresoFormaPagosForCodigoTarjeta = egresoFormaPagosForCodigoTarjeta;
		this.tipoPagoRepresentantes = tipoPagoRepresentantes;
		this.divisas = divisas;
		this.indicadorsForCodigoTipo = indicadorsForCodigoTipo;
		this.solicitudMantenimientos = solicitudMantenimientos;
		this.indicadorActividadEscalas = indicadorActividadEscalas;
		this.proveedorBancos = proveedorBancos;
		this.rosterCompetenciasForCodigoJugadorClave = rosterCompetenciasForCodigoJugadorClave;
		this.ligas = ligas;
		this.indicadorTests = indicadorTests;
		this.personasForCodigoParroquia = personasForCodigoParroquia;
		this.personalContratosForCodigoHorario = personalContratosForCodigoHorario;
		this.personalJuegos = personalJuegos;
		this.indicadorsForCodigoModalidad = indicadorsForCodigoModalidad;
		this.institucionsForCodigoTipoInstitucion = institucionsForCodigoTipoInstitucion;
		this.personalCargos = personalCargos;
		this.estadoActividads = estadoActividads;
		this.estadios = estadios;
		this.actividads = actividads;
		this.jugadorForaneos = jugadorForaneos;
		this.recaudoPorProcesosForCodigoImportancia = recaudoPorProcesosForCodigoImportancia;
		this.cuentaPagarsForCodigoTipoDocumento = cuentaPagarsForCodigoTipoDocumento;
		this.competenciasForCodigoEstadoCompetencia = competenciasForCodigoEstadoCompetencia;
		this.actividadEntrenamientos = actividadEntrenamientos;
		this.rosterCompetenciasForCodigoTipoJugador = rosterCompetenciasForCodigoTipoJugador;
		this.personalForaneoJuegos = personalForaneoJuegos;
		this.lineUpsForCodigoPosicion = lineUpsForCodigoPosicion;
		this.logroPorJugadors = logroPorJugadors;
		this.documentoAcreedors = documentoAcreedors;
		this.sesionEjecutadas = sesionEjecutadas;
		this.institucionsForCodigoParroquia = institucionsForCodigoParroquia;
		this.cuentaPagarsForCodigoTipoEgreso = cuentaPagarsForCodigoTipoEgreso;
		this.ingresoFormaPagosForCodigoFormaPago = ingresoFormaPagosForCodigoFormaPago;
		this.escalaMedicions = escalaMedicions;
		this.datoAcademicosForCodigoCurso = datoAcademicosForCodigoCurso;
		this.asistenciaJugadors = asistenciaJugadors;
		this.personalForaneos = personalForaneos;
		this.datoAcademicosForCodigoAnnoEscolar = datoAcademicosForCodigoAnnoEscolar;
		this.comisionEquipos = comisionEquipos;
		this.jugadorsForCodigoPais = jugadorsForCodigoPais;
		this.datoBasicos = datoBasicos;
		this.ingresos = ingresos;
		this.personalTipoNominas = personalTipoNominas;
		this.jugadorsForCodigoParroquiaNacimiento = jugadorsForCodigoParroquiaNacimiento;
		this.tallaPorIndumentariasForCodigoTalla = tallaPorIndumentariasForCodigoTalla;
		this.equipos = equipos;
		this.materialsForCodigoTipoMaterial = materialsForCodigoTipoMaterial;
		this.medicos = medicos;
		this.competenciasForCodigoEstado = competenciasForCodigoEstado;
		this.tareaActividadPlanificadas = tareaActividadPlanificadas;
		this.competenciasForCodigoOrganizacion = competenciasForCodigoOrganizacion;
		this.ingresoFormaPagosForCodigoBanco = ingresoFormaPagosForCodigoBanco;
		this.sesions = sesions;
		this.ingresoFormaPagosForCodigoTarjeta = ingresoFormaPagosForCodigoTarjeta;
		this.tipoCompetencias = tipoCompetencias;
		this.resultadoActividads = resultadoActividads;
		this.nominas = nominas;
		this.afeccionPersonals = afeccionPersonals;
		this.horarios = horarios;
		this.lapsoDeportivos = lapsoDeportivos;
		this.familiars = familiars;
		this.retiroTraslados = retiroTraslados;
		this.personalContratosForCodigoModalidad = personalContratosForCodigoModalidad;
		this.egresoFormaPagosForCodigoBanco = egresoFormaPagosForCodigoBanco;
		this.actividadCalendarios = actividadCalendarios;
		this.personasForCodigoTipoPersona = personasForCodigoTipoPersona;
		this.afeccionJugadors = afeccionJugadors;
		this.recaudoPorProcesosForCodigoProceso = recaudoPorProcesosForCodigoProceso;
		this.recaudoPorProcesosForCodigoDocumento = recaudoPorProcesosForCodigoDocumento;
		this.planificacionActividads = planificacionActividads;
		this.datoSocials = datoSocials;
		this.datoConductas = datoConductas;
		this.lineUpsForCodigoTipoMencion = lineUpsForCodigoTipoMencion;
		this.seguridadFuncionals = seguridadFuncionals;
		this.juegos = juegos;
		this.motivoSancions = motivoSancions;
		this.materialsForCodigoUnidadMedida = materialsForCodigoUnidadMedida;
		this.tareaActividads = tareaActividads;
		this.personaNaturals = personaNaturals;
		this.conceptoNominas = conceptoNominas;
		this.instalacions = instalacions;
	}

	@Id
	@Column(name = "codigo_dato_basico", unique = true, nullable = false)
	public int getCodigoDatoBasico() {
		return this.codigoDatoBasico;
	}

	public void setCodigoDatoBasico(int codigoDatoBasico) {
		this.codigoDatoBasico = codigoDatoBasico;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "codigo_tipo_dato", nullable = false)
	public TipoDato getTipoDato() {
		return this.tipoDato;
	}

	public void setTipoDato(TipoDato tipoDato) {
		this.tipoDato = tipoDato;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_codigo_dato_basico")
	public DatoBasico getDatoBasico() {
		return this.datoBasico;
	}

	public void setDatoBasico(DatoBasico datoBasico) {
		this.datoBasico = datoBasico;
	}

	@Column(name = "nombre", nullable = false)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "descripcion")
	public String getDescripcion() {
		return this.descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	@Column(name = "estatus", nullable = false, length = 1)
	public char getEstatus() {
		return this.estatus;
	}

	public void setEstatus(char estatus) {
		this.estatus = estatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<FamiliarJugador> getFamiliarJugadors() {
		return this.familiarJugadors;
	}

	public void setFamiliarJugadors(Set<FamiliarJugador> familiarJugadors) {
		this.familiarJugadors = familiarJugadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoIndumentaria")
	public Set<TallaPorIndumentaria> getTallaPorIndumentariasForCodigoIndumentaria() {
		return this.tallaPorIndumentariasForCodigoIndumentaria;
	}

	public void setTallaPorIndumentariasForCodigoIndumentaria(
			Set<TallaPorIndumentaria> tallaPorIndumentariasForCodigoIndumentaria) {
		this.tallaPorIndumentariasForCodigoIndumentaria = tallaPorIndumentariasForCodigoIndumentaria;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PlanRotacion> getPlanRotacions() {
		return this.planRotacions;
	}

	public void setPlanRotacions(Set<PlanRotacion> planRotacions) {
		this.planRotacions = planRotacions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTarjeta")
	public Set<EgresoFormaPago> getEgresoFormaPagosForCodigoTarjeta() {
		return this.egresoFormaPagosForCodigoTarjeta;
	}

	public void setEgresoFormaPagosForCodigoTarjeta(
			Set<EgresoFormaPago> egresoFormaPagosForCodigoTarjeta) {
		this.egresoFormaPagosForCodigoTarjeta = egresoFormaPagosForCodigoTarjeta;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<TipoPagoRepresentante> getTipoPagoRepresentantes() {
		return this.tipoPagoRepresentantes;
	}

	public void setTipoPagoRepresentantes(
			Set<TipoPagoRepresentante> tipoPagoRepresentantes) {
		this.tipoPagoRepresentantes = tipoPagoRepresentantes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Divisa> getDivisas() {
		return this.divisas;
	}

	public void setDivisas(Set<Divisa> divisas) {
		this.divisas = divisas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipo")
	public Set<Indicador> getIndicadorsForCodigoTipo() {
		return this.indicadorsForCodigoTipo;
	}

	public void setIndicadorsForCodigoTipo(
			Set<Indicador> indicadorsForCodigoTipo) {
		this.indicadorsForCodigoTipo = indicadorsForCodigoTipo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<SolicitudMantenimiento> getSolicitudMantenimientos() {
		return this.solicitudMantenimientos;
	}

	public void setSolicitudMantenimientos(
			Set<SolicitudMantenimiento> solicitudMantenimientos) {
		this.solicitudMantenimientos = solicitudMantenimientos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<IndicadorActividadEscala> getIndicadorActividadEscalas() {
		return this.indicadorActividadEscalas;
	}

	public void setIndicadorActividadEscalas(
			Set<IndicadorActividadEscala> indicadorActividadEscalas) {
		this.indicadorActividadEscalas = indicadorActividadEscalas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<ProveedorBanco> getProveedorBancos() {
		return this.proveedorBancos;
	}

	public void setProveedorBancos(Set<ProveedorBanco> proveedorBancos) {
		this.proveedorBancos = proveedorBancos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoJugadorClave")
	public Set<RosterCompetencia> getRosterCompetenciasForCodigoJugadorClave() {
		return this.rosterCompetenciasForCodigoJugadorClave;
	}

	public void setRosterCompetenciasForCodigoJugadorClave(
			Set<RosterCompetencia> rosterCompetenciasForCodigoJugadorClave) {
		this.rosterCompetenciasForCodigoJugadorClave = rosterCompetenciasForCodigoJugadorClave;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Liga> getLigas() {
		return this.ligas;
	}

	public void setLigas(Set<Liga> ligas) {
		this.ligas = ligas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<IndicadorTest> getIndicadorTests() {
		return this.indicadorTests;
	}

	public void setIndicadorTests(Set<IndicadorTest> indicadorTests) {
		this.indicadorTests = indicadorTests;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoParroquia")
	public Set<Persona> getPersonasForCodigoParroquia() {
		return this.personasForCodigoParroquia;
	}

	public void setPersonasForCodigoParroquia(
			Set<Persona> personasForCodigoParroquia) {
		this.personasForCodigoParroquia = personasForCodigoParroquia;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoHorario")
	public Set<PersonalContrato> getPersonalContratosForCodigoHorario() {
		return this.personalContratosForCodigoHorario;
	}

	public void setPersonalContratosForCodigoHorario(
			Set<PersonalContrato> personalContratosForCodigoHorario) {
		this.personalContratosForCodigoHorario = personalContratosForCodigoHorario;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonalJuego> getPersonalJuegos() {
		return this.personalJuegos;
	}

	public void setPersonalJuegos(Set<PersonalJuego> personalJuegos) {
		this.personalJuegos = personalJuegos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoModalidad")
	public Set<Indicador> getIndicadorsForCodigoModalidad() {
		return this.indicadorsForCodigoModalidad;
	}

	public void setIndicadorsForCodigoModalidad(
			Set<Indicador> indicadorsForCodigoModalidad) {
		this.indicadorsForCodigoModalidad = indicadorsForCodigoModalidad;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoInstitucion")
	public Set<Institucion> getInstitucionsForCodigoTipoInstitucion() {
		return this.institucionsForCodigoTipoInstitucion;
	}

	public void setInstitucionsForCodigoTipoInstitucion(
			Set<Institucion> institucionsForCodigoTipoInstitucion) {
		this.institucionsForCodigoTipoInstitucion = institucionsForCodigoTipoInstitucion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonalCargo> getPersonalCargos() {
		return this.personalCargos;
	}

	public void setPersonalCargos(Set<PersonalCargo> personalCargos) {
		this.personalCargos = personalCargos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<EstadoActividad> getEstadoActividads() {
		return this.estadoActividads;
	}

	public void setEstadoActividads(Set<EstadoActividad> estadoActividads) {
		this.estadoActividads = estadoActividads;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Estadio> getEstadios() {
		return this.estadios;
	}

	public void setEstadios(Set<Estadio> estadios) {
		this.estadios = estadios;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "comision_actividad", schema = "public", joinColumns = { @JoinColumn(name = "codigo_comision", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "codigo_actividad", nullable = false, updatable = false) })
	public Set<Actividad> getActividads() {
		return this.actividads;
	}

	public void setActividads(Set<Actividad> actividads) {
		this.actividads = actividads;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<JugadorForaneo> getJugadorForaneos() {
		return this.jugadorForaneos;
	}

	public void setJugadorForaneos(Set<JugadorForaneo> jugadorForaneos) {
		this.jugadorForaneos = jugadorForaneos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoImportancia")
	public Set<RecaudoPorProceso> getRecaudoPorProcesosForCodigoImportancia() {
		return this.recaudoPorProcesosForCodigoImportancia;
	}

	public void setRecaudoPorProcesosForCodigoImportancia(
			Set<RecaudoPorProceso> recaudoPorProcesosForCodigoImportancia) {
		this.recaudoPorProcesosForCodigoImportancia = recaudoPorProcesosForCodigoImportancia;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoDocumento")
	public Set<CuentaPagar> getCuentaPagarsForCodigoTipoDocumento() {
		return this.cuentaPagarsForCodigoTipoDocumento;
	}

	public void setCuentaPagarsForCodigoTipoDocumento(
			Set<CuentaPagar> cuentaPagarsForCodigoTipoDocumento) {
		this.cuentaPagarsForCodigoTipoDocumento = cuentaPagarsForCodigoTipoDocumento;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoEstadoCompetencia")
	public Set<Competencia> getCompetenciasForCodigoEstadoCompetencia() {
		return this.competenciasForCodigoEstadoCompetencia;
	}

	public void setCompetenciasForCodigoEstadoCompetencia(
			Set<Competencia> competenciasForCodigoEstadoCompetencia) {
		this.competenciasForCodigoEstadoCompetencia = competenciasForCodigoEstadoCompetencia;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<ActividadEntrenamiento> getActividadEntrenamientos() {
		return this.actividadEntrenamientos;
	}

	public void setActividadEntrenamientos(
			Set<ActividadEntrenamiento> actividadEntrenamientos) {
		this.actividadEntrenamientos = actividadEntrenamientos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoJugador")
	public Set<RosterCompetencia> getRosterCompetenciasForCodigoTipoJugador() {
		return this.rosterCompetenciasForCodigoTipoJugador;
	}

	public void setRosterCompetenciasForCodigoTipoJugador(
			Set<RosterCompetencia> rosterCompetenciasForCodigoTipoJugador) {
		this.rosterCompetenciasForCodigoTipoJugador = rosterCompetenciasForCodigoTipoJugador;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonalForaneoJuego> getPersonalForaneoJuegos() {
		return this.personalForaneoJuegos;
	}

	public void setPersonalForaneoJuegos(
			Set<PersonalForaneoJuego> personalForaneoJuegos) {
		this.personalForaneoJuegos = personalForaneoJuegos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoPosicion")
	public Set<LineUp> getLineUpsForCodigoPosicion() {
		return this.lineUpsForCodigoPosicion;
	}

	public void setLineUpsForCodigoPosicion(Set<LineUp> lineUpsForCodigoPosicion) {
		this.lineUpsForCodigoPosicion = lineUpsForCodigoPosicion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<LogroPorJugador> getLogroPorJugadors() {
		return this.logroPorJugadors;
	}

	public void setLogroPorJugadors(Set<LogroPorJugador> logroPorJugadors) {
		this.logroPorJugadors = logroPorJugadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<DocumentoAcreedor> getDocumentoAcreedors() {
		return this.documentoAcreedors;
	}

	public void setDocumentoAcreedors(Set<DocumentoAcreedor> documentoAcreedors) {
		this.documentoAcreedors = documentoAcreedors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<SesionEjecutada> getSesionEjecutadas() {
		return this.sesionEjecutadas;
	}

	public void setSesionEjecutadas(Set<SesionEjecutada> sesionEjecutadas) {
		this.sesionEjecutadas = sesionEjecutadas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoParroquia")
	public Set<Institucion> getInstitucionsForCodigoParroquia() {
		return this.institucionsForCodigoParroquia;
	}

	public void setInstitucionsForCodigoParroquia(
			Set<Institucion> institucionsForCodigoParroquia) {
		this.institucionsForCodigoParroquia = institucionsForCodigoParroquia;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoEgreso")
	public Set<CuentaPagar> getCuentaPagarsForCodigoTipoEgreso() {
		return this.cuentaPagarsForCodigoTipoEgreso;
	}

	public void setCuentaPagarsForCodigoTipoEgreso(
			Set<CuentaPagar> cuentaPagarsForCodigoTipoEgreso) {
		this.cuentaPagarsForCodigoTipoEgreso = cuentaPagarsForCodigoTipoEgreso;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoFormaPago")
	public Set<IngresoFormaPago> getIngresoFormaPagosForCodigoFormaPago() {
		return this.ingresoFormaPagosForCodigoFormaPago;
	}

	public void setIngresoFormaPagosForCodigoFormaPago(
			Set<IngresoFormaPago> ingresoFormaPagosForCodigoFormaPago) {
		this.ingresoFormaPagosForCodigoFormaPago = ingresoFormaPagosForCodigoFormaPago;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<EscalaMedicion> getEscalaMedicions() {
		return this.escalaMedicions;
	}

	public void setEscalaMedicions(Set<EscalaMedicion> escalaMedicions) {
		this.escalaMedicions = escalaMedicions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoCurso")
	public Set<DatoAcademico> getDatoAcademicosForCodigoCurso() {
		return this.datoAcademicosForCodigoCurso;
	}

	public void setDatoAcademicosForCodigoCurso(
			Set<DatoAcademico> datoAcademicosForCodigoCurso) {
		this.datoAcademicosForCodigoCurso = datoAcademicosForCodigoCurso;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<AsistenciaJugador> getAsistenciaJugadors() {
		return this.asistenciaJugadors;
	}

	public void setAsistenciaJugadors(Set<AsistenciaJugador> asistenciaJugadors) {
		this.asistenciaJugadors = asistenciaJugadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonalForaneo> getPersonalForaneos() {
		return this.personalForaneos;
	}

	public void setPersonalForaneos(Set<PersonalForaneo> personalForaneos) {
		this.personalForaneos = personalForaneos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoAnnoEscolar")
	public Set<DatoAcademico> getDatoAcademicosForCodigoAnnoEscolar() {
		return this.datoAcademicosForCodigoAnnoEscolar;
	}

	public void setDatoAcademicosForCodigoAnnoEscolar(
			Set<DatoAcademico> datoAcademicosForCodigoAnnoEscolar) {
		this.datoAcademicosForCodigoAnnoEscolar = datoAcademicosForCodigoAnnoEscolar;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<ComisionEquipo> getComisionEquipos() {
		return this.comisionEquipos;
	}

	public void setComisionEquipos(Set<ComisionEquipo> comisionEquipos) {
		this.comisionEquipos = comisionEquipos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoPais")
	public Set<Jugador> getJugadorsForCodigoPais() {
		return this.jugadorsForCodigoPais;
	}

	public void setJugadorsForCodigoPais(Set<Jugador> jugadorsForCodigoPais) {
		this.jugadorsForCodigoPais = jugadorsForCodigoPais;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<DatoBasico> getDatoBasicos() {
		return this.datoBasicos;
	}

	public void setDatoBasicos(Set<DatoBasico> datoBasicos) {
		this.datoBasicos = datoBasicos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Ingreso> getIngresos() {
		return this.ingresos;
	}

	public void setIngresos(Set<Ingreso> ingresos) {
		this.ingresos = ingresos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonalTipoNomina> getPersonalTipoNominas() {
		return this.personalTipoNominas;
	}

	public void setPersonalTipoNominas(
			Set<PersonalTipoNomina> personalTipoNominas) {
		this.personalTipoNominas = personalTipoNominas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoParroquiaNacimiento")
	public Set<Jugador> getJugadorsForCodigoParroquiaNacimiento() {
		return this.jugadorsForCodigoParroquiaNacimiento;
	}

	public void setJugadorsForCodigoParroquiaNacimiento(
			Set<Jugador> jugadorsForCodigoParroquiaNacimiento) {
		this.jugadorsForCodigoParroquiaNacimiento = jugadorsForCodigoParroquiaNacimiento;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTalla")
	public Set<TallaPorIndumentaria> getTallaPorIndumentariasForCodigoTalla() {
		return this.tallaPorIndumentariasForCodigoTalla;
	}

	public void setTallaPorIndumentariasForCodigoTalla(
			Set<TallaPorIndumentaria> tallaPorIndumentariasForCodigoTalla) {
		this.tallaPorIndumentariasForCodigoTalla = tallaPorIndumentariasForCodigoTalla;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Equipo> getEquipos() {
		return this.equipos;
	}

	public void setEquipos(Set<Equipo> equipos) {
		this.equipos = equipos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoMaterial")
	public Set<Material> getMaterialsForCodigoTipoMaterial() {
		return this.materialsForCodigoTipoMaterial;
	}

	public void setMaterialsForCodigoTipoMaterial(
			Set<Material> materialsForCodigoTipoMaterial) {
		this.materialsForCodigoTipoMaterial = materialsForCodigoTipoMaterial;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Medico> getMedicos() {
		return this.medicos;
	}

	public void setMedicos(Set<Medico> medicos) {
		this.medicos = medicos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoEstado")
	public Set<Competencia> getCompetenciasForCodigoEstado() {
		return this.competenciasForCodigoEstado;
	}

	public void setCompetenciasForCodigoEstado(
			Set<Competencia> competenciasForCodigoEstado) {
		this.competenciasForCodigoEstado = competenciasForCodigoEstado;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<TareaActividadPlanificada> getTareaActividadPlanificadas() {
		return this.tareaActividadPlanificadas;
	}

	public void setTareaActividadPlanificadas(
			Set<TareaActividadPlanificada> tareaActividadPlanificadas) {
		this.tareaActividadPlanificadas = tareaActividadPlanificadas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoOrganizacion")
	public Set<Competencia> getCompetenciasForCodigoOrganizacion() {
		return this.competenciasForCodigoOrganizacion;
	}

	public void setCompetenciasForCodigoOrganizacion(
			Set<Competencia> competenciasForCodigoOrganizacion) {
		this.competenciasForCodigoOrganizacion = competenciasForCodigoOrganizacion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoBanco")
	public Set<IngresoFormaPago> getIngresoFormaPagosForCodigoBanco() {
		return this.ingresoFormaPagosForCodigoBanco;
	}

	public void setIngresoFormaPagosForCodigoBanco(
			Set<IngresoFormaPago> ingresoFormaPagosForCodigoBanco) {
		this.ingresoFormaPagosForCodigoBanco = ingresoFormaPagosForCodigoBanco;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Sesion> getSesions() {
		return this.sesions;
	}

	public void setSesions(Set<Sesion> sesions) {
		this.sesions = sesions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTarjeta")
	public Set<IngresoFormaPago> getIngresoFormaPagosForCodigoTarjeta() {
		return this.ingresoFormaPagosForCodigoTarjeta;
	}

	public void setIngresoFormaPagosForCodigoTarjeta(
			Set<IngresoFormaPago> ingresoFormaPagosForCodigoTarjeta) {
		this.ingresoFormaPagosForCodigoTarjeta = ingresoFormaPagosForCodigoTarjeta;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "condicion_competencia", schema = "public", joinColumns = { @JoinColumn(name = "codigo_condicion", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "codigo_tipo_competencia", nullable = false, updatable = false) })
	public Set<TipoCompetencia> getTipoCompetencias() {
		return this.tipoCompetencias;
	}

	public void setTipoCompetencias(Set<TipoCompetencia> tipoCompetencias) {
		this.tipoCompetencias = tipoCompetencias;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<ResultadoActividad> getResultadoActividads() {
		return this.resultadoActividads;
	}

	public void setResultadoActividads(
			Set<ResultadoActividad> resultadoActividads) {
		this.resultadoActividads = resultadoActividads;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Nomina> getNominas() {
		return this.nominas;
	}

	public void setNominas(Set<Nomina> nominas) {
		this.nominas = nominas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<AfeccionPersonal> getAfeccionPersonals() {
		return this.afeccionPersonals;
	}

	public void setAfeccionPersonals(Set<AfeccionPersonal> afeccionPersonals) {
		this.afeccionPersonals = afeccionPersonals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Horario> getHorarios() {
		return this.horarios;
	}

	public void setHorarios(Set<Horario> horarios) {
		this.horarios = horarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<LapsoDeportivo> getLapsoDeportivos() {
		return this.lapsoDeportivos;
	}

	public void setLapsoDeportivos(Set<LapsoDeportivo> lapsoDeportivos) {
		this.lapsoDeportivos = lapsoDeportivos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Familiar> getFamiliars() {
		return this.familiars;
	}

	public void setFamiliars(Set<Familiar> familiars) {
		this.familiars = familiars;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<RetiroTraslado> getRetiroTraslados() {
		return this.retiroTraslados;
	}

	public void setRetiroTraslados(Set<RetiroTraslado> retiroTraslados) {
		this.retiroTraslados = retiroTraslados;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoModalidad")
	public Set<PersonalContrato> getPersonalContratosForCodigoModalidad() {
		return this.personalContratosForCodigoModalidad;
	}

	public void setPersonalContratosForCodigoModalidad(
			Set<PersonalContrato> personalContratosForCodigoModalidad) {
		this.personalContratosForCodigoModalidad = personalContratosForCodigoModalidad;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoBanco")
	public Set<EgresoFormaPago> getEgresoFormaPagosForCodigoBanco() {
		return this.egresoFormaPagosForCodigoBanco;
	}

	public void setEgresoFormaPagosForCodigoBanco(
			Set<EgresoFormaPago> egresoFormaPagosForCodigoBanco) {
		this.egresoFormaPagosForCodigoBanco = egresoFormaPagosForCodigoBanco;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<ActividadCalendario> getActividadCalendarios() {
		return this.actividadCalendarios;
	}

	public void setActividadCalendarios(
			Set<ActividadCalendario> actividadCalendarios) {
		this.actividadCalendarios = actividadCalendarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoPersona")
	public Set<Persona> getPersonasForCodigoTipoPersona() {
		return this.personasForCodigoTipoPersona;
	}

	public void setPersonasForCodigoTipoPersona(
			Set<Persona> personasForCodigoTipoPersona) {
		this.personasForCodigoTipoPersona = personasForCodigoTipoPersona;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<AfeccionJugador> getAfeccionJugadors() {
		return this.afeccionJugadors;
	}

	public void setAfeccionJugadors(Set<AfeccionJugador> afeccionJugadors) {
		this.afeccionJugadors = afeccionJugadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoProceso")
	public Set<RecaudoPorProceso> getRecaudoPorProcesosForCodigoProceso() {
		return this.recaudoPorProcesosForCodigoProceso;
	}

	public void setRecaudoPorProcesosForCodigoProceso(
			Set<RecaudoPorProceso> recaudoPorProcesosForCodigoProceso) {
		this.recaudoPorProcesosForCodigoProceso = recaudoPorProcesosForCodigoProceso;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoDocumento")
	public Set<RecaudoPorProceso> getRecaudoPorProcesosForCodigoDocumento() {
		return this.recaudoPorProcesosForCodigoDocumento;
	}

	public void setRecaudoPorProcesosForCodigoDocumento(
			Set<RecaudoPorProceso> recaudoPorProcesosForCodigoDocumento) {
		this.recaudoPorProcesosForCodigoDocumento = recaudoPorProcesosForCodigoDocumento;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PlanificacionActividad> getPlanificacionActividads() {
		return this.planificacionActividads;
	}

	public void setPlanificacionActividads(
			Set<PlanificacionActividad> planificacionActividads) {
		this.planificacionActividads = planificacionActividads;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<DatoSocial> getDatoSocials() {
		return this.datoSocials;
	}

	public void setDatoSocials(Set<DatoSocial> datoSocials) {
		this.datoSocials = datoSocials;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<DatoConducta> getDatoConductas() {
		return this.datoConductas;
	}

	public void setDatoConductas(Set<DatoConducta> datoConductas) {
		this.datoConductas = datoConductas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoMencion")
	public Set<LineUp> getLineUpsForCodigoTipoMencion() {
		return this.lineUpsForCodigoTipoMencion;
	}

	public void setLineUpsForCodigoTipoMencion(
			Set<LineUp> lineUpsForCodigoTipoMencion) {
		this.lineUpsForCodigoTipoMencion = lineUpsForCodigoTipoMencion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<SeguridadFuncional> getSeguridadFuncionals() {
		return this.seguridadFuncionals;
	}

	public void setSeguridadFuncionals(
			Set<SeguridadFuncional> seguridadFuncionals) {
		this.seguridadFuncionals = seguridadFuncionals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Juego> getJuegos() {
		return this.juegos;
	}

	public void setJuegos(Set<Juego> juegos) {
		this.juegos = juegos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<MotivoSancion> getMotivoSancions() {
		return this.motivoSancions;
	}

	public void setMotivoSancions(Set<MotivoSancion> motivoSancions) {
		this.motivoSancions = motivoSancions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoUnidadMedida")
	public Set<Material> getMaterialsForCodigoUnidadMedida() {
		return this.materialsForCodigoUnidadMedida;
	}

	public void setMaterialsForCodigoUnidadMedida(
			Set<Material> materialsForCodigoUnidadMedida) {
		this.materialsForCodigoUnidadMedida = materialsForCodigoUnidadMedida;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<TareaActividad> getTareaActividads() {
		return this.tareaActividads;
	}

	public void setTareaActividads(Set<TareaActividad> tareaActividads) {
		this.tareaActividads = tareaActividads;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonaNatural> getPersonaNaturals() {
		return this.personaNaturals;
	}

	public void setPersonaNaturals(Set<PersonaNatural> personaNaturals) {
		this.personaNaturals = personaNaturals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<ConceptoNomina> getConceptoNominas() {
		return this.conceptoNominas;
	}

	public void setConceptoNominas(Set<ConceptoNomina> conceptoNominas) {
		this.conceptoNominas = conceptoNominas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Instalacion> getInstalacions() {
		return this.instalacions;
	}

	public void setInstalacions(Set<Instalacion> instalacions) {
		this.instalacions = instalacions;
	}

}
